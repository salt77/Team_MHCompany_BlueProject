#include "stdafx.h"
#include "../Include/stdafx.h"
#include "Scene_Lobby.h"
#include "Scene_Manager.h"
#include "BackGround.h"

#ifndef Tool_Map
#include "MFC_Map.h"
#endif

#include "CharacterMgr.h"

USING(Engine)

CScene_Lobby::CScene_Lobby(LPDIRECT3DDEVICE9 pGraphicDev)
	: CScene(pGraphicDev)
{
}

CScene_Lobby::~CScene_Lobby()
{
}

CScene_Lobby * CScene_Lobby::Create(LPDIRECT3DDEVICE9 pGraphicDev)
{
	CScene_Lobby*	pInstance = new CScene_Lobby(pGraphicDev);

	if (FAILED(pInstance->Ready_Scene()))
		Safe_Release(pInstance);

	return pInstance;
}

void CScene_Lobby::Free()
{
	CScene::Free();
}

HRESULT CScene_Lobby::Ready_Scene()
{
	SetWindowText(g_hWnd, L"로비 1");
	Ready_Prototype();
	Ready_Layer();
<<<<<<< HEAD
	Ready_Map_Layer();
=======
	Ready_LightInfo();
>>>>>>> Branch_Merge00

	return S_OK;
}

_int CScene_Lobby::Update_Scene(const _float & fTimeDelta)
{
	_int	iExit = CScene::Update_Scene(fTimeDelta);

	if (Management Key_Down(KEY_SPACE))
	{
		CScene_Manager::GetInstance()->Set_Loading(E_SCENETAG::Scene_Logo);
	}

	return	iExit;
}

_int CScene_Lobby::LateUpdate_Scene(const _float & fTimeDelta)
{
	_int	iExit = CScene::LateUpdate_Scene(fTimeDelta);

	return iExit;
}

void CScene_Lobby::Render_Scene()
{
}

HRESULT CScene_Lobby::Ready_Layer()
{
	CLayer*		pLayer = CLayer::Create();
	assert(pLayer);

	CGameObject*			pGameObject = nullptr;
	
	// BackGround _ 쉐이더 디버그용
	pGameObject = CBackGround::Create(m_pGraphicDev, E_OBJTAG::OBJ_Test);
	assert(pGameObject);
	pLayer->Add_GameObject(E_OBJTAG::OBJ_Test, pGameObject);
	pGameObject->Add_Pos(E_POSITION::POS_Z, 3.f);

	// SMesh_Test
	pGameObject = CSMesh_Test::Create(m_pGraphicDev, E_OBJTAG::OBJ_Test);
	assert(pGameObject);
	pLayer->Add_GameObject(E_OBJTAG::OBJ_Test, pGameObject);

	// DMesh_Test
	pGameObject = CDMesh_Test::Create(m_pGraphicDev, E_OBJTAG::OBJ_Player);
	assert(pGameObject);
	pLayer->Add_GameObject(E_OBJTAG::OBJ_Player, pGameObject);
	pGameObject->Add_Pos(E_POSITION::POS_X, 3.f);

	// Dynamic Camera
	T_CAMINFO    tCamInfo;
	tCamInfo.vEye = _vec3(0.f, 5.f, 0.f);
	tCamInfo.vAt = _vec3(0.f, 0.f, 0.f);
	tCamInfo.vUp = VEC_UP;
	tCamInfo.fFov = 90.f;
	tCamInfo.fAspect = WINCX / WINCY;
	tCamInfo.fNear = 0.1f;
	tCamInfo.fFar = 1000.f;

	pGameObject = CDynamicCamera::Create(m_pGraphicDev, g_hWnd, tCamInfo, E_OBJTAG::OBJ_DynamicCamera);
	assert(pGameObject);
	pLayer->Add_GameObject(E_OBJTAG::OBJ_DynamicCamera, pGameObject);

	Add_Layer(E_LAYERTAG::Environment, pLayer);

	// Ui Layer
	CLayer* pUiLayer = CLayer::Create();
	assert(pUiLayer);

	// Ui Sorting 테스트 용도
	pGameObject = CUI_Object::Create(m_pGraphicDev, &g_hWnd, E_OBJTAG::OBJ_UI);
	assert(pGameObject);
	pUiLayer->Add_GameObject(E_OBJTAG::OBJ_UI, pGameObject);
	static_cast<CUI_Object*>(pGameObject)->Set_Ui_Text(L"Pivot_TR");
	static_cast<CUI_Object*>(pGameObject)->Add_Ui_SizeX(200);
	static_cast<CUI_Object*>(pGameObject)->Add_Ui_SizeY(200);
	static_cast<CUI_Object*>(pGameObject)->Set_Sorting_Layer(1);

	CGameObject* pChild= CUI_Object::Create(m_pGraphicDev, &g_hWnd, E_OBJTAG::OBJ_UI);
	assert(pChild);
	static_cast<CUI_Object*>(pChild)->Set_Ui_Text(L"Pivot_ASD");
	static_cast<CUI_Object*>(pChild)->Set_Ui_TransformAnchor(E_Anchor::Anchor_TR);
	static_cast<CUI_Object*>(pGameObject)->Set_Child(static_cast<CUI_Object*>(pChild));

	//pChild = CUI_Object::Create(m_pGraphicDev, E_OBJTAG::OBJ_UI);
	//assert(pChild);
	//static_cast<CUI_Object*>(pChild)->Set_Ui_Text(L"Pivot_ASD");
	//static_cast<CUI_Object*>(pChild)->Set_Ui_TransformAnchor(E_Anchor::Anchor_TL);
	//static_cast<CUI_Object*>(pGameObject)->Set_Child(static_cast<CUI_Object*>(pChild));

	//// Anchor 테스트

	Add_Layer(E_LAYERTAG::UI, pUiLayer);   

	return S_OK;
}

HRESULT CScene_Lobby::Ready_Map_Layer()
{
	//레이어 만들기
	CLayer*		pLayer = CLayer::Create();
	assert(pLayer);
	
	Add_Layer(E_LAYERTAG::Map, pLayer);

	return S_OK;
}

HRESULT CScene_Lobby::Ready_Prototype()
{
	return S_OK;
}

HRESULT CScene_Lobby::Ready_LightInfo()
{
	D3DLIGHT9			tLightInfo;
	ZeroMemory(&tLightInfo, sizeof(D3DLIGHT9));

	tLightInfo.Type = D3DLIGHT_DIRECTIONAL;
	tLightInfo.Diffuse = D3DXCOLOR(1.f, 0.f, 0.f, 1.f);
	tLightInfo.Specular = D3DXCOLOR(1.f, 1.f, 1.f, 1.f);
	tLightInfo.Ambient = D3DXCOLOR(0.2f, 0.2f, 0.2f, 0.2f);

	_vec3 vLightDiection = _vec3(1.f, -1.f, 1.f);
	D3DXVec3Normalize(&vLightDiection, &vLightDiection);
	tLightInfo.Direction = vLightDiection;

	if (Management Ready_Light(m_pGraphicDev, &tLightInfo, 0)< 0) return E_FAIL;

	return S_OK;
}